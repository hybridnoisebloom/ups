#!/usr/bin/env python2
# ups, package manager for linux, solaris, *bsd, and mac os x.
# written by dbro and licensed under the simplified BSD licenses

# IMPORTS:

import sys
import os
import urllib
import tarfile
import bz2
import json

version = "0.5pre2"

# BACKEND CODE:

if sys.platform.startswith("darwin"):
	binrepo = "http://www.sites.google.com/site/upspackagemanager/repository/bin/osx"
	ups_stuff = "/Applications/ups"
	pkglist = "/Applications/ups/ups-pkg-list.txt"
	pkgdb = "http://www.sites.google.com/site/upspackagemanager/repository/ups-db-osx.txt"
else:
	binrepo = "http://www.sites.google.com/site/upspackagemanager/repository/bin/unixlike"
	ups_stuff = "/etc/ups"
	pkglist = "/etc/ups/ups-pkg-list.txt"
	pkgdb = "http://www.sites.google.com/site/upspackagemanager/repository/ups-db.txt"

def pkg_install( pkg ):
	# This installs the specified package.
	filename = str(pkg)+".tar.bz2"
	address = binrepo+filename
	pkginfo = str(pkg)+"_info.json"
	
	print "Downloading and extracting package..."
	
	archive = urllib.urlopen(address, 'r').read()
	
	os.chdir("/etc/ups")									# All of the credit here goes to Hollinski
	
	archive0 = open(filename, 'wb')
	archive0.write(archive)
	archive0.close()
	
	bz2.decompress(filename)
	
	archive1 = tarfile.open(filename, 'r')
	archive1.extract(pkginfo)
	
	
	jsonstuff = json.load(pkginfo)
	
	# Look at and print the Metainfo.
	for stuff in jsonstuff["meta-inf"]:
		print stuff
			
	# Install dependencies:
	for dep in jsonstuff["depends"]:
		pkginstall( dep )
	
	# Copy stuff to other places:
	for dir_ in jsonstuff["path_map"]:
		for member_name in jsonstuff["path_map"][dir_]:
			
			dest = os.path.join(dir_, member_name)
	
			print "Unpacking '{member}' to '{dest}'".format(member=member_name, dest=dest)

		archive.extract(member_name, dest)
	
	archive1.close()
	
	log0 = open(pkglist, 'a')
	
	log0.write( pkg+"\n" )

def pkg_remove( rmpkg ):
	# Removes the specified package.
	# Author's comments: This will be the easiest one to write (not that the other two were difficult.)
	os.chdir(ups_stuff)
	jsonstuff0 = json.load(rmpkg+"_info.json")
	for dir_ in jsonstuff0["pathmap"]:
		dest = os.path.join(dir_, member_name)
		os.remove(dest)
	os.remove(rmpkg+"_info.json")

def show_vers():
	print "ups"
	print "version "+str(version)

def show_credits():
	print "ups"
	print "\ndeveloped and programmed by draven stedman"

def show_license():
	print "Copyleft (c) 2012, Draven Stedman"
	print "All rights reserved."
	print "\nRedistribution and use in source and binary forms,"
	print "with or without modification, are permitted provided"
	print "that the following conditions are met:"
	print "\n"
	print "I. Redistributions of source code must retain the above"
	print "   copyright notice, this list of conditions and the "
	print "   following disclaimer."
	print "II. Redistributions in binary form must reproduce the above "
	print "    copyright notice, this list of conditions and the following "
	print "    disclaimer in the documentation and/or other materials"
	print "    provided with the distribution."
	print "\n"
	print "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND "
	print "CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,"
	print "INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF "
	print "MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED."
	print "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE"
	print "FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR "
	print "CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT"
	print "OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;"
	print "OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF "
	print "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT "
	print "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF"
	print "THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY"
	print "OF SUCH DAMAGE."

	
def pkg_update(pkg0):
	os.chdir("/usr/bin")
	os.remove( pkg0 )
	pkginstall( pkg0 )

def update_all_pkg():
	b = open(pkgList, 'r')
	for c in b:
		c = c.rstrip()
		pkgupdate(c)
		print "Update of package '"+c+"' completed."
	b.close()
	print "Update of all packages completed."

# FRONTEND CODE:


try:
	if sys.argv[1] == "install":
		try:
			pkg_install( sys.argv[2] )
		except IndexError:
			print "No package given."
	elif sys.argv[1] == "remove":
		try:
			pkg_remove( sys.argv[2] )
		except IndexError:
			print "No package given."
	elif sys.argv[1] == "update":
		try:
			pkg_update( sys.argv[2] )
		except IndexError:
			print "No package given."
	elif sys.argv[1] == "--credits":
		show_credits()
	elif sys.argv[1] == "--version":
		show_vers()
	elif sys.argv[1] == "--license":
		show_license()
	else:
		print "usage: ups --credits"
		print "	      ups --version"
		print "       ups [operation] [package]"
except IndexError:
	print "usage: ups --credits"
	print "       ups --version"
	print "       ups --license"
	print "       ups [operation] [package]"
