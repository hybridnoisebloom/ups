#!/usr/bin/env python2 -BO
# ups, package manager for linux, solaris, *bsd, windows and mac os x.
# written by dbro and licensed under the simplified BSD license
# also the official package manager (the secondary one is rpm) of parallax and
# nanosecond linux, two Linux distros.
# Changes in 0.5pre3: Added Windows support, combined update-ups and ups.

# tested on:
# Linux: september 2012
# BSD: N/A
# Solaris: N/A
# Windows: N/A
# Mac OS X: N/A

# IMPORTS:

import sys
import os
import urllib
import tarfile
import bz2
import json

version = "0.5pre3"

# BACKEND CODE:

if sys.platform.startswith("darwin"):
	binrepo = "http://www.sites.google.com/site/upspackagemanager/repository/\
    bin/osx"
	ups_stuff = "/Applications/ups"
	pkglist = ups_stuff + "/ups-pkg-list.txt"
	pkgdb = "http://www.sites.google.com/site/upspackagemanager/repository/\
    ups-db-osx.txt"
elif sys.platform.startswith("win"):
	binrepo = "http://www.sites.google.com/site/upspackagemanager/repository/\
    bin/windows"
	ups_stuff = os.path.normpath("C:\Program Files\UPS")
	pkglist = ups_stuff + "\ups-pkg-list.txt"
	pkgdb = "http://www.sites.google.com/site/upspackagemanager/repository/\
    ups-db-win.txt"
else:
	binrepo = "http://www.sites.google.com/site/upspackagemanager/repository/\
    bin/unixlike"
	ups_stuff = "/etc/ups"
	pkglist = ups_stuff"/ups-pkg-list.txt"
	pkgdb = "http://www.sites.google.com/site/upspackagemanager/repository/\
    ups-db.txt"

def pkg_install(pkg):
	
	
	# This installs the specified package.
	filename = str(pkg)+".tar.bz2"
	address = binrepo+filename
	pkginfo = str(pkg)+"_info.json"
	
	print "Downloading and extracting package..."
	
	archive = urllib.urlopen(address, 'r').read()
	
	os.chdir(ups_stuff)
	
	archive0 = open(filename, 'wb')
	archive0.write(archive)
	archive0.close()
	
	bz2.decompress(filename)
	
	archive1 = tarfile.open(filename, 'r')
	archive1.extract(pkginfo)
	
	jsonstuff = json.load(pkginfo)

	# Install dependencies:
	for dep in jsonstuff["depends"]:
		pkginstall(dep)
	
	# Copy stuff to other places:
	for dir_ in jsonstuff["path_map"]:
		for member_name in jsonstuff["path_map"][dir_]:
			
			dest = os.path.join(dir_, member_name)
	
			print "Unpacking '{member}' to '{dest}'".format(member=member_name, 
            dest=dest)

		archive.extract(member_name, dest)
	
	archive1.close()
	
	log0 = open(pkglist, 'a')
	
	log0.write(pkg+"\n")

def pkg_remove(rmpkg):
	
	# Removes the specified package.
	os.chdir(ups_stuff)
	jsonstuff0 = json.load(rmpkg+"_info.json")
	for dir_ in jsonstuff0["path_map"]:
		for member in jsonstuff0["path_map"][dir_]:
			dest = os.path.join(dir_, member_name)
			os.remove(dest)
	os.remove(rmpkg+"_info.json")

def show_vers():
	
	
	print "ups"
	print "version "+str(version)

def show_credits():
	
	
	print "ups"
	print "\nwritten by draven stedman"

def show_license():
	
	
	print "Copyleft (c) 2012, Draven Stedman"
	print "All rights reserved."
	print "\nRedistribution and use in source and binary forms,"
	print "with or without modification, are permitted provided"
	print "that the following conditions are met:"
	print "\n"
	print "I. Redistributions of source code must retain the above"
	print "   copyright notice, this list of conditions and the "
	print "   following disclaimer."
	print "II. Redistributions in binary form must reproduce the above "
	print "    copyright notice, this list of conditions and the following "
	print "    disclaimer in the documentation and/or other materials"
	print "    provided with the distribution."
	print "\n"
	print "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND "
	print "CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,"
	print "INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF "
	print "MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED."
	print "IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE"
	print "FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR "
	print "CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT"
	print "OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;"
	print "OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF "
	print "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT "
	print "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF"
	print "THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY"
	print "OF SUCH DAMAGE."

	
def pkg_update(pkg0):
	
	
	pkg_remove(pkg0)
	pkg_install(pkg0)

def update_all_pkg():
	
	
	b = open(pkglist, 'r')
	for c in b:
		c = c.rstrip()
		pkgupdate(c)
		print "Update of package '"+c+"' completed."
	b.close()
	print "Update of all packages completed."
	
def update_ups():
	
	
	os.chdir("/usr/bin")
	os.remove("ups")
	
	# Change directory to /usr/bin and delete the current version of ups.
	
	os.chdir("/etc/ups")
	
	# Then, change directory to /etc/ups and continue with the updating.
	
	new_ups = urllib.urlopen("http://www.sites.google.com/site/upspackagemanager/\
    downloads/ups.tar.bz2").read()
	
	# Next, open the URL, read the binary into the variable new_ups.

	ups_archive = open("ups.tar.bz2", 'wb')
	ups_archive.write(new_ups)
	ups_archive.close()

	# Then, binary-write the binary of the URL into the file on the system 
    # in /etc/ups.

	bz2.decompress("ups.tar.bz2")

	# Decompress the BZ2 compression.
	
	archive = tarfile.open("ups.tar", 'r')
	archive.extractall("/usr/bin")
	archive.close()

	# Extract the file(s) into /usr/bin.

	os.remove("ups.tar.bz2")
	os.chdir("/usr/bin")
	os.chmod("ups",  0111)
	
	# Delete the archive, chdir into /usr/bin and chmod UPS to executable.
	print "Update complete."

# FRONTEND CODE:

try:
	if sys.argv[1] == "install":
		try:
			pkg_install(sys.argv[2])
		except IndexError:
			print "No package given."
	elif sys.argv[1] == "remove":
		try:
			pkg_remove(sys.argv[2])
		except IndexError:
			print "No package given."
	elif sys.argv[1] == "update":
		try:
			pkg_update(sys.argv[2])
		except IndexError:
			print "No package given."
	elif sys.argv[1] == "--credits":
		show_credits()
	elif sys.argv[1] == "--version":
		show_vers()
	elif sys.argv[1] == "--license":
		show_license()
	elif sys.argv[1] == "-u":
		update_ups()
	else:
		print "usage: ups --credits"
		print "	      ups --version"
		print "       ups -u"
		print "       ups [operation] [package]"
except IndexError:
	print "usage: ups --credits"
	print "       ups --version"
	print "       ups --license"
	print "       ups [operation] [package]"
